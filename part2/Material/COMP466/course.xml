<?xml version="1.0" encoding="UTF-8"?>
<lecture>
	<general>
		<courseID>COMP466</courseID>
		<courseName>Web Technology</courseName>
		<description></description>
	</general>

	<chapter>
		<chapterNumber>1.1</chapterNumber>
		<chapterTopic>HTML Basics</chapterTopic>
		<topics>
			<topic>Headings</topic>
			<paragraph>
				Some text in an HTML4 document may be more important thatn other text. HTML5 provides six heading elements(h1 through h6) for specifying the relative importance of information.
				
				Heading element "h1" is considered the most significant one and is typically rendered in a larger font than the other five. Each successive heading element(h2, h3, etc) is typically rendered in a progressively smaller font.
			</paragraph>
		</topics>
		<topics>
			<topic>Linking</topic>
			<paragraph>
				One of the most important HTML5 features is the hyperlink, which references(or links to) other resources. such as HTML5 documents and images.

				When a user clicks a hyperlink, the browser tries to execute an action associated with it(e.g navigate to a URL). Any displayed element can act as a hyperlink. Web browsers typically underline text hyperlinks and color their text blue by default so that users can distinguish hyperlinks from plain text.
			</paragraph>
		</topics>
		<topics>
			<topic>Forms</topic>
			<paragraph>
				When browsing websites, users often need to provide information such as search queries, e-mail addresses and zip codes. HTML5 provides a mechanism, called a "form", for collecting data from a users.

				Data that users enter on a web page is normally sent to a web server that provides access to a site's resources. When a browser requests a publicly available web page of file that's located on a server, the server processes the request and returns the requested resource. A request contains the name and path of the desired resource and the protocol.
			</paragraph>
		</topics>
	</chapter>
	<chapter>
		<chapterNumber>1.2</chapterNumber>
		<chapterTopic>HTML Input Types</chapterTopic>
		<topics>
			<topic>Input type: Color</topic>
			<paragraph>
				The "color input" type enables the user to enter a color. Most browsers render the "color input" type as a text field in which the user can enter a hexadecimal code or a color name.

			</paragraph>
		</topics>
		<topics>
			<topic>Input type: date</topic>
			<paragraph>
				The "date input" type enables user to enter a data in the form yyyy-mm-dd, allowing user to enter a date.
			</paragraph>
		</topics>
		<topics>
			<topic>Input type: datetime</topic>
			<paragraph>
				The "datetime input" type enables the user to enter a date(year, month, day), time(hour, minute, second, fraction of a second) and the time zone set to UTC. Currently, most of the browsers render "datetime" as a text field;
			</paragraph>
		</topics>
		<topics>
			<topic>Input type: email</topic>
			<paragraph>
				The "email input" type enables user to enter an e-mail address or a list of e-mail address separated by commas. HTML5 does not check whether an e-mail address entered by the user actually exists, rather it just validates that the e-mail address is in the proper format.
			</paragraph>
		</topics>
		<topics>
			<topic>Input type: tel</topic>
			<paragraph>
				The "tel input" type enables the user to enter a telephone number. The tel input type is rendered as a text field in all of the browsers. The length and format of telephone numbers varies greatly based on location, making validation quite complex
				
				HTML5 does not self validate the "tel input" type. To ensure that the user enters a phone number in a proper format, we've added a "pattern" attribute that uses a regular expression to determine whether the number is in the correct format.
			</paragraph>
		</topics>
		<topics>
			<topic>Input type: url</topic>
			<paragraph>
				The "url input" type enables the user to enter a URL. The element is rendered as a text field. If the user enters an improperly formatted URL, the URL will not validate. HTML5 does not check whether the URL entered is valid; rather it validates that the URL entered is in the proper format
			</paragraph>
		</topics>
	</chapter>
	<chapter>
		<chapterNumber>1.3</chapterNumber>
		<chapterTopic>HTML Page-Structure Elements</chapterTopic>
		<topics>
			<topic>header Element</topic>
			<paragraph>
				The "header" element creates a header for this page that contains both text and graphics. The "header" element can be used multiple times on a page and include HTML headings, navigation, images and logos and more.
			</paragraph>
		</topics>
		<topics>
			<topic>nav Element</topic>
			<paragraph>
				The "nav" element groups navigation links
			</paragraph>
		</topics>
		<topics>
			<topic>figure Element and figcaption Element</topic>
			<paragraph>
				The "figure" element describes a figure(such as an image, chart or table) in the document so that it could be moved to the size of the page or to another page

				The "figcaption" element provides a caption for the image in the "figure" elemnet
			</paragraph>
		</topics>
		<topics>
			<topic>aside Element</topic>
			<paragraph>
				The "aside" element describes content that's related to the surrounding content but is somewhat separate from the flow of the text
			</paragraph>
		</topics>
		<topics>
			<topic>footer Element</topic>
			<paragraph>
				The "footer" element described a footer, content that usually appear at the bottom of the content or section element
			</paragraph>
		</topics>
	</chapter>

	<chapter>
		<chapterNumber>2.1</chapterNumber>
		<chapterTopic>CSS Introduction</chapterTopic>
		<topics>
			<topic> </topic>
			<paragraph>
				"Cascading STyle Sheet3(CSS3)" that allows you to specify the presentation of elements on a web page separately from the document's structure and content. This separation of structure form presentation simplifies maintaining an dmodifying web pages, especially on large-scale websites.
			</paragraph>
		</topics>
		<topics>
			<topic>Inline Styles</topic>
			<paragraph>
				You can declare document styles inline in the HTML5 markup, in embedded style sheets or in separate CSS files. Inline styles override any other styles from embedded style sheets.
			</paragraph>
		</topics>
		<topics>
			<topic>Embedded Style Sheets</topic>
			<paragraph>
				"Embedded Style Sheets", enables you to embed a CSS3 document in an HTML5 document's "head" section. 
			</paragraph>
		</topics>
	</chapter>
	<chapter>
		<chapterNumber>2.2</chapterNumber>
		<chapterTopic>Basic CSS</chapterTopic>
		<topics>
			<topic>font-family Property</topic>
			<paragraph>
				The "font-family" specifies the name of the font to use. Not all users have the same fonts insalled on their computers, so CSS allows you to specify a comma-separated list of fonts to use for a particular style. The browser attempts to use the fonts in the order in which they appear in the list.

			</paragraph>
		</topics>
		<topics>
			<topic>font-size Property</topic>
			<paragraph>
				The "font-size" property specifies the font size of your web. Generally, relative font-size values are preferred over points, because an author does not know the specific measurements of each client's display. Relative values permit more flexible viewing of web pages.
			</paragraph>
		</topics>
		<topics>
			<topic>background-image Property</topic>
			<paragraph>
				The "background-image" property specifies the image URL for the background image. You can also set the "background-color" property in case the image is not found
			</paragraph>
		</topics>
		<topics>
			<topic>background-position Property</topic>
			<paragraph>
				The "background-position" property places the image on the page. The keywords top, bottom, center, left and right are used individually or in combination for vertical and horizontal positioning.
			</paragraph>
		</topics>
	</chapter>
	<chapter>
		<chapterNumber>2.3</chapterNumber>
		<chapterTopic>Advanced CSS</chapterTopic>
		<topics>
			<topic>Box Model and Text Flow</topic>
			<paragraph>
				All block-level elements have a virtual box drawn around them, based on what is known as the "box model". When the browser renders an element using the box model, the content is surrounded by "padding", a "border", and a "margin".
			</paragraph>
		</topics>
		<topics>
			<topic>Margin</topic>
			<paragraph>
				The "margin" property sets the space between the outside of an element's border and all other content on the page

				Margins for individual sides of an element can be specified by using properties "margin-top", "margin-right", "margin-left", "margin-bottom"
			</paragraph>
		</topics>
		<topics>
			<topic>Padding</topic>
			<paragraph>
				The "padding" property determines the distance between the content inside an element and the inside of the element's border
	
				Padding can be specified in the same way, using "padding-top", "padding-right", "padding-left", "padding-bottom"
			</paragraph>
		</topics>
		<topics>
			<topic>aMedia Types and Media Queries</topic>
			<paragraph>
				CSS "media types" allow you to decide what a page should look like, depending on the kind of media being used to display the page. The most common media type for a web page is the "screen" media type, which is a standard computer screen. Other media types in CSS include "handheld", braille, speech and print.
			</paragraph>
		</topics>
	</chapter>

	<chapter>
		<chapterNumber>3.1</chapterNumber>
		<chapterTopic>JavaScript Introduction</chapterTopic>
		<topics>
			<topic></topic>
			<paragraph>
				"JavaScript scripting language", which is used to enhance the functionality and appearance of web pages. Our treatement of JavaScript serves two purposes, it introduces client-side scripting, which makes web pages more dynamic and interactive, and it provides the programming foundation for the server-side.

				Before you can run code with JavaScript on your computer, you may need to change your browser's security settings to allow scripts to run in files on your computer
			</paragraph>
		</topics>
		<topics>
			<topic>Memory Concepts</topic>
			<paragraph>
				Variable names such as "number1" and "sum" actually correspond to "locations" in the computer's memory. Every variable has a "name", a "type" and a "value".

				Unlike its predecessor languages C, C++ and Java, JavaScript does not require variables to have a declared type before they can be used in a script. A variable in JavaScript can contain a value of any data type, and in many situations JavaScript automatically converts between values of different types for you. For this reason, JavaScript is referred to as a "loosely typed language."

				When a variable is declared in JavaScript, but is not given a value, the variable has an "undefined" value. Attempting to use the value of such a variable is normally a logic error. When variables are declared, they're not assigned values unless you specify them. Assigning the value null to a variable indicates that it does not contain a value.
			</paragraph>
		</topics>
		<topics>
			<topic>Arithmetic</topic>
			<paragraph>
				Many scripts perform arithmetic calculations. Note the use of various special symbols not used in algebra. The asterisk(*) indicates multiplications; the percent sign(%) is the reminder operator

				JavaScript applies the operators in arithmetic expressions in a percise sequence determined by the following "rule of operator precedence", which are generally the same as those followed in algebra

				1.Multiplication, divsion and remainder operations are applied first. If an expression contains several multiplication, division and remainder operations, operators are applied from left to right.

				2.Addition and subtration operations are applied next. If an expression contains several addition and subtraction operations, operators are applied form left to right. Addition and subtraction operations have the same level of precedence.
			</paragraph>
		</topics>
		<topics>
			<topic>Decision Making: Equality and Relational Operators</topic>
			<paragraph>
				JavaSciprt's "if statement" that allows a script to make a decision based on the truth or falsity of a condition. Conditions in "if" statements can be formed by using the "equality operators" and "relational operators". 

				The relational operators all have the same level precedence and associate from left to right

				The equality operators also associate from left to right. Each comparision results in a value of true or false
			</paragraph>
		</topics>
	</chapter>
	<chapter>
		<chapterNumber>3.2</chapterNumber>
		<chapterTopic>Program Modules in JavaScript</chapterTopic>
		<topics>
			<topic>Program Modules in JavaScript</topic>
			<paragraph>
				Scripts that you write in JavaScript typically contain of one or more pieces called "functions". You'll combine new functions that you write with prepackaged functions and objects available in JavaScript. The prepackaged functions that belong to JavaScript objects are called "methods"

				You can write functions to define tasks that may be used at many points in a script. These are referred to as "programmer-defined functions". The actual actual statements defining the function are written only once and are hidden from other functions

				A function is "invoked" by a "function call". Functions are invoked by writing the name of the function, followed by a left paranthesis, followed by a comma-separated list of zero or more arguments, followed by a right parenthesis.
			</paragraph>
		</topics>
		<topics>
			<topic>Function Definitions</topic>
			<paragraph>
				The function-name is any valide identifies.

				The parameter-list is a comma-separated list containing the names of the parameters received by the function when it's called. If a function does not receive any values, the parameter-list is empty.

				The declarations and statements between the braces form the "function body"
			</paragraph>
		</topics>
		<topics>
			<topic>Scope Rules</topic>
			<paragraph>
				The "scope" of an identifies for a variable or function is the portion of the program in which the identifier can be referenced. "Global variables" that are declared in the head element are accessible in any part of a script and said to have 
								
				"global scope". Thus every function in the page's script(s) can potentially use the variables.
							
				Identifiers declared inside a function have "function(or local) scope" and can be used only in that function. Function scope begins with the opening left brace({) of the function in which the identifier is declared and ends at the function's terminating right brace(}). Local variables of a function and function parameters have function scope. If a local variable in a function has the same name as a global variable, the global variable is "hidden" from the body of the function.
			</paragraph>
		</topics>
	</chapter>
	<chapter>
		<chapterNumber>3.3</chapterNumber>
		<chapterTopic>JavaScript Object</chapterTopic>
		<topics>
			<topic>Math Object</topic>
			<paragraph>
				The "Math" object's methods enable you to conveniently perform many common mathematical calculations.
			</paragraph>
		</topics>
		<topics>
			<topic>Date Object</topic>
			<paragraph>
				JavaScript's "Date" object provides methods for date and time manipulations. These can be performed based on the computer's "local time zone" or based on World Time Standard's "Coordinated Universal Time(TTC)"
			</paragraph>
		</topics>
		<topics>
			<topic>Number Objects</topic>
			<paragraph>
				JavaScript automatically creates Number objects to store numeric values in a script
			</paragraph>
		</topics>
		<topics>
			<topic>document Object</topic>
			<paragraph>
				The "document" object, which we've used extensively, is provided by the browser and allows JavaScript code to manipulate the current document in the browser. The "document" object has several properties and methods.
			</paragraph>
		</topics>
	</chapter>
</lecture>
